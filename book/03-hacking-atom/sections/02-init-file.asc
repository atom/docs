[[_the_init_file]]
=== The Init File

When Atom finishes loading, it will evaluate `init.coffee` in your `~/.atom` directory, giving you a chance to run CoffeeScript code to make customizations. Code in this file has full access to https://atom.io/docs/api/latest/Atom[Atom's API]. If customizations become extensive, consider creating a package, which we will cover in https://atom.io/docs/latest/hacking-atom-package-word-count[Package Word Count].

You can open the `init.coffee` file in an editor from the _Atom > Open Your Init Script_ menu. This file can also be named `init.js` and contain JavaScript code.

For example, if you have the Audio Beep configuration setting enabled, you could add the following code to your `init.coffee` file to have Atom greet you with an audio beep every time it loads:

```coffee
atom.beep()
```

Because `init.coffee` provides access to Atom's API, you can use it to implement useful commands without creating a new package or extending an existing one. Here's a command which uses the https://atom.io/docs/api/latest/Selection[Selection API] and https://atom.io/docs/api/latest/Clipboard[Clipboard API] to construct a Markdown link from the selected text and the clipboard contents as the URL:

```coffee
atom.commands.add 'atom-text-editor', 'markdown:paste-as-link', ->
  return unless editor = atom.workspace.getActiveTextEditor()

  selection = editor.getLastSelection()
  clipboardText = atom.clipboard.read()

  selection.insertText("[#{selection.getText()}](#{clipboardText})")
```

Now, reload Atom and use the <<_command_palette>> to execute the new command by name (i.e., "Markdown: Paste As Link"). And if you'd like to trigger the command via a keyboard shortcut, you can define a <<_customizing_keybindings,keymap for the command>>.
